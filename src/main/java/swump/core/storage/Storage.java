package swump.core.storage;

import swump.core.Game;
import swump.core.Puzzle;

public interface Storage {
    public int getNumberOfPuzzles(int difficulty);

    /*
     * Operation: retrievePuzzle(int difficulty): Puzzle
     * Parameter: Difficulty can only have 3 different values - Easy(0), Advance(1)
     * and Hard(2).
     * Description: Retrieve a random puzzle from the database based on the
     * difficulty level.
     * Algo:
     * 1. Get first puzzle from the db, filter by difficulty.
     * 2. All data (puzzleID for the puzzle will be retrieved from the db.
     * 3. Create puzzle object
     * Precondition: none
     * Post condition: A puzzle based on the difficulty level will be returned.
     */
    public Puzzle retrievePuzzle(int difficulty);

    /*
     * Operation: retrievePuzzleByID(int puzzleID): Puzzle
     * Parameter: Puzzle's unique identification number
     * Description: Retrieve puzzle from the database based on its unique id.
     * Algo:
     * 1. Get first puzzle from the db by id.
     * 2. All data (puzzleID for the puzzle will be retrieved from the db.
     * 3. Create puzzle object
     * Precondition: none
     * Post condition: A puzzle based on unique id will be returned.
     */
    public Puzzle retrievePuzzleByID(int puzzleID);

    /*
     * Operation: addPuzzle(int[][] solution, int[][] givens, int difficulty):
     * boolean
     * Parameter: Difficulty can only have 3 different values - Easy(0), Advance(1)
     * and Hard(2).
     * Description: Retrieve a random puzzle from the database based on the
     * difficulty level.
     * Algo:
     * 1. Get first puzzle from the db, filter by difficulty.
     * 2. All data (puzzleID for the puzzle will be retrieved from the db.
     * 3. Create puzzle object
     * Precondition: none
     * Post condition: A puzzle based on the difficulty level will be returned.
     */
    public boolean addPuzzle(int[][] solution, int[][] givens, int difficulty);

    /*
     * Operation: deletePuzzle(long id): boolean
     * Parameter: Puzzle id
     * Description: Deletes the specified puzzle from the database
     * Precondition: Puzzle is solved by player
     * Post condition: The specified puzzle is deleted from the database.
     */
    public void deletePuzzle(long id);

    /*
     * Operation: updateScore(String player, int difficulty, long score):
     * boolean
     * Parameter: playerName represents the player's name, difficulty represents the
     * difficulty level of the game play, score is the timing that player used to
     * complete the puzzle
     * Description: This method is to update the score after the player
     * Precondition: Player must completes the puzzle.
     * Post condition: Record of the game will be saved to the database.
     * Algo:
     * 1. Add record into scoreTable
     */
    public boolean updateScore(String playerName, int difficulty, long score);

    /*
     * Operation: retrieveScoreboard()
     * Parameter: None
     * Description: Player choose to view the scoreboard.
     * Precondition: None
     * Post: Scoreboard will be displayed.
     * Algo:
     * 1. Get all records from score table (table stores only top 10 for each
     * difficulty)
     * 2. sort in descending order
     */
    public String[][][] retrieveScoreboard();

    /*
     * Operation: saveGame(String gameName, Puzzle puzzle, long timeElapsed):
     * boolean
     * Parameter: gameName is the name chosen by player in order to recall the saved
     * game, Puzzle store the game state at which the player save the game.
     * Precondition: A game must be in play.
     * Post condition: The game will be saved into the database.
     * Algo:
     * 1. Timestamp is autogenerated for PK.
     * 2. Save into DB savedGame table(include pencil marks, answers, puzzle ID,
     * time stamp, time elapsed)
     */
    public boolean saveGame(String gameName, Puzzle puzzle, long timeElapsed);

    /*
     * Operation: loadGame(String name): Puzzle
     * Parameter: name of the game to be loaded
     * Description: Load a previously saved game state
     * Precondition: none
     * Postcondition: Specified game state is loaded
     * Algo:
     * 1. get saved game from savedGame table
     * 2. (include pencil marks, answers, puzzle ID, time elapsed)
     */
    public Game loadGame(String name);

    /*
     * Operation: deleteGame(String name): Puzzle
     * Parameter: name of the game to be deleted
     * Description: Delete a previously saved game state
     * Precondition: none
     * Postcondition: Saved game is deleted
     */
    public void deleteGame(String name);

    /*
     * Operation: loadGameList():String[listOfGames][gameName & timeStamp]
     * Parameter: none
     * Description: Get the list of saved games
     * Precondition: none
     * Postcondition: List of saved game is retrieved
     * Algo:
     * 1. Return list of all save games
     */
    public String[] loadGameList();
}
